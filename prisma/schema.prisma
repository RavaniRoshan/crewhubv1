generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
}

enum ExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum APIProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
}

model User {
  id               String           @id @default(uuid()) @db.Uuid
  email            String           @unique
  name             String
  avatarUrl        String?
  hashedPassword   String?
  emailVerified    DateTime?
  googleId         String?          @unique
  resetToken       String?          @unique
  resetTokenExpiry DateTime?
  subscriptionTier SubscriptionTier @default(FREE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  projects  Project[]
  apiKeys   APIKey[]
  accounts  Account[]
  sessions  Session[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @db.Uuid
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflows Workflow[]

  @@index([userId])
  @@index([status])
}

model Workflow {
  id          String         @id @default(uuid()) @db.Uuid
  projectId   String         @db.Uuid
  name        String
  description String?
  configJson  Json?
  status      WorkflowStatus @default(DRAFT)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  executions Execution[]

  @@index([projectId])
  @@index([status])
}

model Execution {
  id           String          @id @default(uuid()) @db.Uuid
  workflowId   String         @db.Uuid
  status       ExecutionStatus @default(RUNNING)
  inputData    Json?
  outputData   Json?
  costUsd      Decimal        @default(0) @db.Decimal(10, 4)
  tokenUsage   Int            @default(0)
  startedAt    DateTime       @default(now())
  completedAt  DateTime?
  errorMessage String?

  // Relations
  workflow    Workflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
}

model APIKey {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @db.Uuid
  provider      APIProvider
  encryptedKey  String
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([provider])
  @@index([isActive])
}